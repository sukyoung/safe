Heap: {
  #Date.prototype.toDateString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(50),
    "length": <0.0, F, F, F>
  },
  #Date.prototype.getUTCSeconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(70),
    "length": <0.0, F, F, F>
  },
  #Global.decodeURIComponent: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(7),
    "length": <1.0, F, F, F>
  },
  #Function.prototype.call: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(34),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getMonth: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(59),
    "length": <0.0, F, F, F>
  },
  #Global.encodeURIComponent: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(9),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setDate: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(83),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setMilliseconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(75),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.toUTCString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(89),
    "length": <0.0, F, F, F>
  },
  #Function.prototype.bind: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(35),
    "length": <1.0, F, F, F>
  },
  #Object.create: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(21),
    "length": <2.0, F, F, F>
  },
  #Date.prototype.getUTCHours: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(66),
    "length": <0.0, F, F, F>
  },
  #Global.eval: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(1),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.toLocaleString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(52),
    "length": <0.0, F, F, F>
  },
  #Function.prototype.toString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(32),
    "length": <0.0, F, F, F>
  },
  #Date.prototype.toISOString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(90),
    "length": <0.0, F, F, F>
  },
  #Math.sqrt: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(133),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getUTCMinutes: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(68),
    "length": <0.0, F, F, F>
  },
  #Global.isFinite: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(5),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getUTCMonth: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(60),
    "length": <0.0, F, F, F>
  },
  #Object.seal: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(24),
    "length": <1.0, F, F, F>
  },
  #ReferenceError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "name": <"ReferenceError", T, F, T>,
    "constructor": <#ReferenceError, T, F, T>,
    "message": <"", T, F, T>
  },
  #Math.tan: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(134),
    "length": <1.0, F, F, F>
  },
  #SyntaxError: {
    [[Construct]]: fun(112),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(111),
    "name": <"SyntaxError", T, F, T>,
    "length": <1.0, F, F, F>,
    "prototype": <#SyntaxError.prototype, F, F, F>
  },
  #Date.prototype.setUTCHours: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(82),
    "length": <4.0, F, F, F>
  },
  #Error: {
    [[Construct]]: fun(104),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(103),
    "length": <1.0, F, F, F>,
    "prototype": <#Error.prototype, F, F, F>
  },
  #Date.prototype.getMinutes: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(67),
    "length": <0.0, F, F, F>
  },
  #Object.prototype.propertyIsEnumerable: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(15),
    "length": <1.0, F, F, F>
  },
  #Date: {
    [[Construct]]: fun(93),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(92),
    "UTC": <#Date.UTC, T, F, T>,
    "now": <#Date.now, T, F, T>,
    "parse": <#Date.parse, T, F, T>,
    "length": <7.0, F, F, F>,
    "prototype": <#Date.prototype, F, F, F>
  },
  #Object.keys: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(30),
    "length": <1.0, F, F, F>
  },
  #RegExp.prototype.test: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(98),
    "length": <1.0, F, F, F>
  },
  #Math: {
    [[Class]]: "Math",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "E": <2.718281828459045, F, F, F>,
    "LN10": <2.302585092994046, F, F, F>,
    "random": <#Math.random, T, F, T>,
    "asin": <#Math.asin, T, F, T>,
    "LOG2E": <1.4426950408889634, F, F, F>,
    "min": <#Math.min, T, F, T>,
    "cos": <#Math.cos, T, F, T>,
    "exp": <#Math.exp, T, F, T>,
    "LN2": <0.6931471805599453, F, F, F>,
    "atan": <#Math.atan, T, F, T>,
    "pow": <#Math.pow, T, F, T>,
    "ceil": <#Math.ceil, T, F, T>,
    "LOG10E": <0.4342944819032518, F, F, F>,
    "max": <#Math.max, T, F, T>,
    "atan2": <#Math.atan2, T, F, T>,
    "sqrt": <#Math.sqrt, T, F, T>,
    "PI": <3.141592653589793, F, F, F>,
    "floor": <#Math.floor, T, F, T>,
    "SQRT2": <1.4142135623730951, F, F, F>,
    "round": <#Math.round, T, F, T>,
    "tan": <#Math.tan, T, F, T>,
    "SQRT1_2": <0.7071067811865476, F, F, F>,
    "abs": <#Math.abs, T, F, T>,
    "sin": <#Math.sin, T, F, T>,
    "log": <#Math.log, T, F, T>,
    "acos": <#Math.acos, T, F, T>
  },
  #Date.prototype.setUTCMilliseconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(76),
    "length": <1.0, F, F, F>
  },
  #TypeError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "name": <"TypeError", T, F, T>,
    "constructor": <#TypeError, T, F, T>,
    "message": <"", T, F, T>
  },
  #Global: {
    [[Class]]: "Object",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "NaN": <NaN, F, F, F>,
    "Function": <#Function, T, F, T>,
    "URIError": <#URIError, T, F, T>,
    "JSON": <#JSON, T, F, T>,
    "Error": <#Error, T, F, T>,
    "Number": <#Number, T, F, T>,
    "decodeURIComponent": <#Global.decodeURIComponent, T, F, T>,
    "RangeError": <#RangeError, T, F, T>,
    "ReferenceError": <#ReferenceError, T, F, T>,
    "encodeURIComponent": <#Global.encodeURIComponent, T, F, T>,
    "EvalError": <#EvalError, T, F, T>,
    "encodeURI": <#Global.encodeURI, T, F, T>,
    "escape": <#Global.escape, T, F, T>,
    "unescape": <#Global.unescape, T, F, T>,
    "eval": <#Global.eval, T, F, T>,
    "isFinite": <#Global.isFinite, T, F, T>,
    "Object": <#Object, T, F, T>,
    "Math": <#Math, T, F, T>,
    "parseFloat": <#Global.parseFloat, T, F, T>,
    "TypeError": <#TypeError, T, F, T>,
    "<>Global<>global": <#Global, F, F, F>,
    "isNaN": <#Global.isNaN, T, F, T>,
    "Date": <#Date, T, F, T>,
    "decodeURI": <#Global.decodeURI, T, F, T>,
    "RegExp": <#RegExp, T, F, T>,
    "parseInt": <#Global.parseInt, T, F, T>,
    "Infinity": <Infinity, F, F, F>,
    "SyntaxError": <#SyntaxError, T, F, T>,
    "<>Global<>true": <true, F, F, F>,
    "undefined": <undefined, F, F, F>
  },
  #Math.min: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(128),
    "length": <2.0, F, F, F>
  },
  #Math.abs: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(117),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getUTCDate: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(62),
    "length": <0.0, F, F, F>
  },
  #Number.prototype.toLocaleString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(41),
    "length": <0.0, F, F, F>
  },
  #Object.defineProperties: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(23),
    "length": <2.0, F, F, F>
  },
  #Math.log: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(126),
    "length": <1.0, F, F, F>
  },
  #Object.prototype.valueOf: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(12),
    "length": <0.0, F, F, F>
  },
  #Object.isExtensible: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(29),
    "length": <1.0, F, F, F>
  },
  #Number.prototype: {
    [[Class]]: "Number",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    [[PrimitiveValue]]: 0.0,
    "toExponential": <#Number.prototype.toExponential, T, F, T>,
    "valueOf": <#Number.prototype.valueOf, T, F, T>,
    "toLocaleString": <#Number.prototype.toLocaleString, T, F, T>,
    "constructor": <#Number, T, F, T>,
    "toString": <#Number.prototype.toString, T, F, T>,
    "toFixed": <#Number.prototype.toFixed, T, F, T>,
    "toPrecision": <#Number.prototype.toPrecision, T, F, T>
  },
  #Date.prototype.toLocaleDateString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(53),
    "length": <0.0, F, F, F>
  },
  #Date.prototype.constructor: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(48),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setSeconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(77),
    "length": <2.0, F, F, F>
  },
  #RangeError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "name": <"RangeError", T, F, T>,
    "constructor": <#RangeError, T, F, T>,
    "message": <"", T, F, T>
  },
  #Date.UTC: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(95),
    "length": <7.0, F, F, F>
  },
  #Date.now: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(96),
    "length": <0.0, F, F, F>
  },
  #Math.max: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(127),
    "length": <2.0, F, F, F>
  },
  #JSON: {
    [[Class]]: "JSON",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "parse": <#JSON.parse, T, F, T>,
    "stringify": <#JSON.stringify, T, F, T>
  },
  #Date.prototype.getUTCFullYear: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(58),
    "length": <0.0, F, F, F>
  },
  #Date.prototype.valueOf: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(55),
    "length": <0.0, F, F, F>
  },
  #Date.parse: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(94),
    "length": <1.0, F, F, F>
  },
  #Object.getPrototypeOf: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(18),
    "length": <1.0, F, F, F>
  },
  #Number.prototype.toString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(40),
    "length": <1.0, F, F, F>
  },
  #Global.parseInt: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(2),
    "length": <2.0, F, F, F>
  },
  #Number.prototype.toPrecision: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(45),
    "length": <1.0, F, F, F>
  },
  #Object.prototype.isPrototypeOf: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(14),
    "length": <1.0, F, F, F>
  },
  #Global.encodeURI: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(8),
    "length": <1.0, F, F, F>
  },
  #Function.prototype: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    [[Scope]]: null,
    [[Call]]: fun(31),
    "bind": <#Function.prototype.bind, T, F, T>,
    "constructor": <#Function, T, F, T>,
    "apply": <#Function.prototype.apply, T, F, T>,
    "toString": <#Function.prototype.toString, T, F, T>,
    "length": <0.0, F, F, F>,
    "call": <#Function.prototype.call, T, F, T>
  },
  #Function: {
    [[Construct]]: fun(37),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(36),
    "length": <1.0, F, F, F>,
    "prototype": <#Function.prototype, F, F, F>
  },
  #Math.random: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(130),
    "length": <0.0, F, F, F>
  },
  #Number: {
    [[Construct]]: fun(47),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(46),
    "NaN": <NaN, F, F, F>,
    "MIN_VALUE": <4.9E-324, F, F, F>,
    "NEGATIVE_INFINITY": <-Infinity, F, F, F>,
    "POSITIVE_INFINITY": <Infinity, F, F, F>,
    "MAX_VALUE": <1.7976931348623157E308, F, F, F>,
    "length": <1.0, F, F, F>,
    "prototype": <#Number.prototype, F, F, F>
  },
  #Date.prototype.setUTCDate: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(84),
    "length": <1.0, F, F, F>
  },
  #Math.cos: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(123),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setFullYear: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(87),
    "length": <3.0, F, F, F>
  },
  #Math.asin: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(119),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getUTCMilliseconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(72),
    "length": <0.0, F, F, F>
  },
  #Date.prototype: {
    [[Class]]: "Date",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    [[PrimitiveValue]]: NaN,
    "setMinutes": <#Date.prototype.setMinutes, T, F, T>,
    "setTime": <#Date.prototype.setTime, T, F, T>,
    "getUTCMonth": <#Date.prototype.getUTCMonth, T, F, T>,
    "valueOf": <#Date.prototype.valueOf, T, F, T>,
    "getUTCMinutes": <#Date.prototype.getUTCMinutes, T, F, T>,
    "setMilliseconds": <#Date.prototype.setMilliseconds, T, F, T>,
    "toUTCString": <#Date.prototype.toUTCString, T, F, T>,
    "toLocaleDateString": <#Date.prototype.toLocaleDateString, T, F, T>,
    "setUTCMonth": <#Date.prototype.setUTCMonth, T, F, T>,
    "setUTCFullYear": <#Date.prototype.setUTCFullYear, T, F, T>,
    "setHours": <#Date.prototype.setHours, T, F, T>,
    "toLocaleString": <#Date.prototype.toLocaleString, T, F, T>,
    "constructor": <#Date, T, F, T>,
    "getDate": <#Date.prototype.getDate, T, F, T>,
    "getTime": <#Date.prototype.getTime, T, F, T>,
    "setSeconds": <#Date.prototype.setSeconds, T, F, T>,
    "setUTCSeconds": <#Date.prototype.setUTCSeconds, T, F, T>,
    "getUTCFullYear": <#Date.prototype.getUTCFullYear, T, F, T>,
    "getUTCHours": <#Date.prototype.getUTCHours, T, F, T>,
    "getUTCDay": <#Date.prototype.getUTCDay, T, F, T>,
    "getUTCDate": <#Date.prototype.getUTCDate, T, F, T>,
    "setDate": <#Date.prototype.setDate, T, F, T>,
    "setUTCMinutes": <#Date.prototype.setUTCMinutes, T, F, T>,
    "getHours": <#Date.prototype.getHours, T, F, T>,
    "toISOString": <#Date.prototype.toISOString, T, F, T>,
    "setFullYear": <#Date.prototype.setFullYear, T, F, T>,
    "toTimeString": <#Date.prototype.toTimeString, T, F, T>,
    "setUTCMilliseconds": <#Date.prototype.setUTCMilliseconds, T, F, T>,
    "getUTCSeconds": <#Date.prototype.getUTCSeconds, T, F, T>,
    "getMilliseconds": <#Date.prototype.getMilliseconds, T, F, T>,
    "setMonth": <#Date.prototype.setMonth, T, F, T>,
    "getDay": <#Date.prototype.getDay, T, F, T>,
    "toLocaleTimeString": <#Date.prototype.toLocaleTimeString, T, F, T>,
    "toDateString": <#Date.prototype.toDateString, T, F, T>,
    "toString": <#Date.prototype.toString, T, F, T>,
    "getSeconds": <#Date.prototype.getSeconds, T, F, T>,
    "getUTCMilliseconds": <#Date.prototype.getUTCMilliseconds, T, F, T>,
    "getMinutes": <#Date.prototype.getMinutes, T, F, T>,
    "getMonth": <#Date.prototype.getMonth, T, F, T>,
    "getTimezoneOffset": <#Date.prototype.getTimezoneOffset, T, F, T>,
    "getFullYear": <#Date.prototype.getFullYear, T, F, T>,
    "setUTCDate": <#Date.prototype.setUTCDate, T, F, T>,
    "setUTCHours": <#Date.prototype.setUTCHours, T, F, T>,
    "toJSON": <#Date.prototype.toJSON, T, F, T>
  },
  #RangeError: {
    [[Construct]]: fun(108),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(107),
    "name": <"RangeError", T, F, T>,
    "length": <1.0, F, F, F>,
    "prototype": <#RangeError.prototype, F, F, F>
  },
  #TypeError: {
    [[Construct]]: fun(114),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(113),
    "name": <"TypeError", T, F, T>,
    "length": <1.0, F, F, F>,
    "prototype": <#TypeError.prototype, F, F, F>
  },
  #Date.prototype.getSeconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(69),
    "length": <0.0, F, F, F>
  },
  #Error.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "name": <"Error", T, F, T>,
    "constructor": <#Error, T, F, T>,
    "message": <"", T, F, T>,
    "toString": <#Error.prototype.toString, T, F, T>
  },
  #Date.prototype.getTime: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(56),
    "length": <0.0, F, F, F>
  },
  #Math.round: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(131),
    "length": <1.0, F, F, F>
  },
  #Object.prototype.toLocaleString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(11),
    "length": <0.0, F, F, F>
  },
  #RegExp: {
    [[Construct]]: fun(101),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(100),
    "length": <2.0, F, F, F>,
    "prototype": <#RegExp.prototype, F, F, F>
  },
  #Math.acos: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(118),
    "length": <1.0, F, F, F>
  },
  #RegExp.prototype: {
    [[Class]]: "RegExp",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "test": <#RegExp.prototype.test, T, F, T>,
    "constructor": <#RegExp, T, F, T>,
    "toString": <#RegExp.prototype.toString, T, F, T>,
    "exec": <#RegExp.prototype.exec, T, F, T>
  },
  #RegExp.prototype.exec: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(97),
    "length": <1.0, F, F, F>
  },
  #Math.sin: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(132),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setMonth: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(85),
    "length": <2.0, F, F, F>
  },
  #Date.prototype.toString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(49),
    "length": <0.0, F, F, F>
  },
  #Number.prototype.constructor: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(39),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getDate: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(61),
    "length": <0.0, F, F, F>
  },
  #Math.atan2: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(121),
    "length": <2.0, F, F, F>
  },
  #Date.prototype.toTimeString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(51),
    "length": <0.0, F, F, F>
  },
  #Date.prototype.setTime: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(74),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setMinutes: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(79),
    "length": <3.0, F, F, F>
  },
  #Date.prototype.setUTCFullYear: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(88),
    "length": <3.0, F, F, F>
  },
  #SyntaxError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "name": <"SyntaxError", T, F, T>,
    "constructor": <#SyntaxError, T, F, T>,
    "message": <"", T, F, T>
  },
  #Global.isNaN: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(4),
    "length": <1.0, F, F, F>
  },
  #RegExp.prototype.toString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(99),
    "length": <0.0, F, F, F>
  },
  #Object.prototype.hasOwnProperty: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(13),
    "length": <1.0, F, F, F>
  },
  #Number.prototype.valueOf: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(42),
    "length": <0.0, F, F, F>
  },
  #URIError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "name": <"URIError", T, F, T>,
    "constructor": <#URIError, T, F, T>,
    "message": <"", T, F, T>
  },
  #Object.isFrozen: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(28),
    "length": <1.0, F, F, F>
  },
  #Object.freeze: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(25),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getDay: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(63),
    "length": <0.0, F, F, F>
  },
  #Error.prototype.toString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(102),
    "length": <0.0, F, F, F>
  },
  #Object.prototype.toString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(10),
    "length": <0.0, F, F, F>
  },
  #Object: {
    [[Construct]]: fun(17),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(16),
    "getOwnPropertyNames": <#Object.getOwnPropertyNames, T, F, T>,
    "isFrozen": <#Object.isFrozen, T, F, T>,
    "getPrototypeOf": <#Object.getPrototypeOf, T, F, T>,
    "preventExtensions": <#Object.preventExtensions, T, F, T>,
    "create": <#Object.create, T, F, T>,
    "freeze": <#Object.freeze, T, F, T>,
    "getOwnPropertyDescriptor": <#Object.getOwnPropertyDescriptor, T, F, T>,
    "seal": <#Object.seal, T, F, T>,
    "defineProperty": <#Object.defineProperty, T, F, T>,
    "length": <1.0, F, F, F>,
    "prototype": <#Object.prototype, F, F, F>,
    "isSealed": <#Object.isSealed, T, F, T>,
    "defineProperties": <#Object.defineProperties, T, F, T>,
    "keys": <#Object.keys, T, F, T>,
    "isExtensible": <#Object.isExtensible, T, F, T>
  },
  #Date.prototype.toJSON: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(91),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getHours: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(65),
    "length": <0.0, F, F, F>
  },
  #URIError: {
    [[Construct]]: fun(116),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(115),
    "name": <"URIError", T, F, T>,
    "length": <1.0, F, F, F>,
    "prototype": <#URIError.prototype, F, F, F>
  },
  #Math.exp: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(124),
    "length": <1.0, F, F, F>
  },
  #Object.getOwnPropertyNames: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(20),
    "length": <1.0, F, F, F>
  },
  #Function.prototype.apply: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(33),
    "length": <2.0, F, F, F>
  },
  #Object.preventExtensions: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(26),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setUTCSeconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(78),
    "length": <2.0, F, F, F>
  },
  #Date.prototype.setUTCMinutes: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(80),
    "length": <3.0, F, F, F>
  },
  #Global.parseFloat: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(3),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getUTCDay: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(64),
    "length": <0.0, F, F, F>
  },
  #EvalError: {
    [[Construct]]: fun(106),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(105),
    "name": <"EvalError", T, F, T>,
    "length": <1.0, F, F, F>,
    "prototype": <#EvalError.prototype, F, F, F>
  },
  #Date.prototype.getTimezoneOffset: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(73),
    "length": <0.0, F, F, F>
  },
  #Date.prototype.setUTCMonth: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(86),
    "length": <2.0, F, F, F>
  },
  #Number.prototype.toFixed: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(43),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.getFullYear: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(57),
    "length": <0.0, F, F, F>
  },
  #Object.getOwnPropertyDescriptor: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(19),
    "length": <2.0, F, F, F>
  },
  #Math.floor: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(125),
    "length": <1.0, F, F, F>
  },
  #Math.atan: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(120),
    "length": <1.0, F, F, F>
  },
  #JSON.stringify: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(136),
    "length": <3.0, F, F, F>
  },
  #Number.prototype.toExponential: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(44),
    "length": <1.0, F, F, F>
  },
  #JSON.parse: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(135),
    "length": <2.0, F, F, F>
  },
  #Math.ceil: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(122),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.setHours: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(81),
    "length": <4.0, F, F, F>
  },
  #Date.prototype.getMilliseconds: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(71),
    "length": <0.0, F, F, F>
  },
  #Global.decodeURI: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(6),
    "length": <1.0, F, F, F>
  },
  #Global.escape: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(38),
    "length": <1.0, F, F, F>
  },
  #Global.unescape: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(39),
    "length": <1.0, F, F, F>
  },
  #Date.prototype.toLocaleTimeString: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(54),
    "length": <0.0, F, F, F>
  },
  #Object.defineProperty: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(22),
    "length": <3.0, F, F, F>
  },
  #ReferenceError: {
    [[Construct]]: fun(110),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[HasInstance]]: null,
    [[Scope]]: null,
    [[Call]]: fun(109),
    "name": <"ReferenceError", T, F, T>,
    "length": <1.0, F, F, F>,
    "prototype": <#ReferenceError.prototype, F, F, F>
  },
  #Object.prototype: {
    [[Class]]: "Object",
    [[Extensible]]: true,
    [[Prototype]]: null,
    "hasOwnProperty": <#Object.prototype.hasOwnProperty, T, F, T>,
    "propertyIsEnumerable": <#Object.prototype.propertyIsEnumerable, T, F, T>,
    "valueOf": <#Object.prototype.valueOf, T, F, T>,
    "toLocaleString": <#Object.prototype.toLocaleString, T, F, T>,
    "constructor": <#Object, T, F, T>,
    "isPrototypeOf": <#Object.prototype.isPrototypeOf, T, F, T>,
    "toString": <#Object.prototype.toString, T, F, T>
  },
  #EvalError.prototype: {
    [[Class]]: "Error",
    [[Extensible]]: true,
    [[Prototype]]: #Error.prototype,
    "name": <"EvalError", T, F, T>,
    "constructor": <#EvalError, T, F, T>,
    "message": <"", T, F, T>
  },
  #Math.pow: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(129),
    "length": <2.0, F, F, F>
  },
  #Object.isSealed: {
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    [[Call]]: fun(27),
    "length": <1.0, F, F, F>
  },
  #BoundFunctionHelper: {
    [[Call]]: fun(137),
    [[Construct]]: fun(138),
    [[HasInstance]]: null
  },
  #DefaultValue: {
    [[Call]]: fun(139)
  },
  #ToPrimitive: {
    [[Call]]: fun(140)
  },
  #ToString: {
    [[Call]]: fun(141)
  },
  #ToNumber: {
    [[Call]]: fun(142)
  }
}

Function: {
  1: [\\
  function eval (x) {
    @NotYetImplemented("eval");
  }
  \\],
  2: [\\
  function parseInt (string, radix) {
    @NotYetImplemented("parseInt");
  }
  \\],
  3: [\\
  function parseFloat (string) {
    @NotYetImplemented("parseFloat");
  }
  \\],
  4: [\\
  function isNaN (number) {
    // 1. If ToNumber(number) is NaN, return true.
    // 2. Otherwise, return false.
    return @SameValue(@ToNumber(number), NaN);
  }
  \\],
  5: [\\
  function isFinite (number) {
    // 1. If ToNumber(number) is NaN, +Inf or -Inf, return false.
    // 2. Otherwise, return true.
    var num = @ToNumber(number);
    return !@SameValue(num, NaN)
      && !@SameValue(num, Infinity)
      && !@SameValue(num, -Infinity);
  }
  \\],
  6: [\\
  function decodeURI (encodedURI) {
    @NotYetImplemented("decodeURI");
  }
  \\],
  7: [\\
  function decodeURIComponent (encodedURIComponent) {
    @NotYetImplemented("decodeURIComponent");
  }
  \\],
  8: [\\
  function encodeURI (uri) {
    @NotYetImplemented("encodeURI");
  }
  \\],
  9: [\\
  function encodeURIComponent (uriComponent) {
    @NotYetImplemented("encodeURIComponent");
  }
  \\],
  10: [\\
  function toString () {
    // 1. If the this value is undefined, return "[object Undefined]".
    if (this === undefined) return '[object Undefined]';
    // 2. If the this value is null, return "[object Null]".
    if (this === null) return '[object Null]';
    // 3. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 4. Let class be the value of the [[Class]] internal property of O.
    var class = @Class(O);
    // 5. Return the String value that is the result of concatenating the three Strings "[object ", class, and "]"
    return '[object ' + class + ']';
  }
  \\],
  11: [\\
  function toLocaleString () {
    // XXX it is not exact toLocaleString but just toString.
    // 1. If the this value is undefined, return "[object Undefined]".
    if (this === undefined) return '[object Undefined';
    // 2. If the this value is null, return "[object Null]".
    if (this === null) return '[object Null]';
    // 3. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 4. Let class be the value of the [[Class]] internal property of O.
    var class = @Class(O);
    // 5. Return the String value that is the result of concatenating the three Strings "[object ", class, and "]"
    return '[object ' + class + ']';
  }
  \\],
  12: [\\
  function valueOf () {
    // 1. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // XXX: We do not support host object.
    // 2. If O is the result of calling the Object constructor with a host object (15.2.2.1), then
    //   a. Return either O or another value such as the host object originally passed to the constructor.
    //      The specific result that is returned is implementation-defined.
    // 3. Return O
    return O;
  }
  \\],
  13: [\\
  function hasOwnProperty (V) {
    // 1. Let P be ToString(V).
    var P = @ToString(V);
    // 2. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument.
    var desc = @GetOwnProperty(O, P);
    // 4. If desc is undefined, return false.
    if (desc === undefined) return false;
    // 5. Return true.
    return true;
  }
  \\],
  14: [\\
  function isPrototypeOf (V) {
    // 1. If V is not an object, return false.
    if (typeof V !== 'function' && typeof V !== 'object' || V === null) return false;
    // 2. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 3. Repeat
    var _V = V;
    while (true) {
      // a. Let V be the value of the [[Prototype]] internal property of V.
      V = @Prototype(V);
      // b. if V is null, return false
      if (V === null) return false;
      // c. If O and V refer to the same object, return true.
      if (O === V) return true;
    }
  }
  \\],
  15: [\\
  function propertyIsEnumerable (V) {
    // 1. Let P be ToString(V).
    var P = @ToString(V);
    // 2. Let O be the result of calling ToObject passing the this value as the argument.
    var O = @ToObject(this);
    // 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument.
    var desc = @GetOwnProperty(O, P);
    // 4. If desc is undefined, return false.
    if (desc === undefined) return false;
    // 5. Return the value of desc.[[Enumerable]].
    return desc.enumerable;
  }
  \\],
  16: [\\
  function Object (value) {
    if (value === null || value === undefined) return {};
    else return @ToObject(value);
  }
  \\],
  17: [\\
  function Object (value) {
    if (value === null || value === undefined) return {};
    else return @ToObject(value);
  }
  \\],
  18: [\\
  function getPrototypeOf (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Return the value of the [[Prototype]] internal property of O.
    return @Prototype(O);
  }
  \\],
  19: [\\
  function getOwnPropertyDescriptor (O, P) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let name be ToString(P).
    var name = @ToString(P);
    // 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with argument name.
    // 4. Return the result of calling FromPropertyDescriptor(desc) (8.10.4).
    return @GetOwnProperty(O, name);
  }
  \\],
  20: [\\
  function getOwnPropertyNames (O) {
    return @getOwnPropertyNames(O)
  }
  \\],
  21: [\\
  function create (O, Properties) {
    // 1. If Type(O) is not Object or Null throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object') throw new TypeError();
    // 2. Let obj be the result of creating a new object as if by the expression new Object() where Object is the
    // standard built-in constructor with that name
    var obj = new Object();
    // 3. Set the [[Prototype]] internal property of obj to O.
    @Prototype(obj, O);
    // 4. If the argument Properties is present and not undefined, add own properties to obj as if by calling the
    // standard built-in function Object.defineProperties with arguments obj and Properties.
    if (Properties !== undefined) Object.defineProperties(obj, Properties);
    // 5. Return obj.
    return obj;
  }
  \\],
  22: [\\
  function defineProperty (O, P, Attributes) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let name be ToString(P).
    var name = @ToString(P);
    // 3. Let desc be the result of calling ToPropertyDescriptor with Attributes as the argument.
    // 4. Call the [[DefineOwnProperty]] internal method of O with arguments name, desc, and true.
    @DefineOwnProperty(O, name, Attributes);
    // 5. Return O.
    return O;
  }
  \\],
  23: [\\
  function defineProperties (O, Properties) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let props be ToObject(Properties).
    var props = @ToObject(Properties);
    // 3. Let names be an internal list containing the names of each enumerable own property of props.
    // 4. Let descriptors be an empty internal List.
    // 5. For each element P of names in list order,
      //   a. Let descObj be the result of calling the [[Get]] internal method of props with P as the argument.
      //   b. Let desc be the result of calling ToPropertyDescriptor with descObj as the argument.
      //   c. Append the pair (a two element List) consisting of P and desc to the end of descriptors.
    // 6. For each pair from descriptors in list order,
    //   a. Let P be the first element of pair.
    //   b. Let desc be the second element of pair.
    //   c. Call the [[DefineOwnProperty]] internal method of O with arguments P, desc, and true.
    var names = @getOwnPropertyNames(props);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      var p_desc = @GetOwnProperty(props, P);
      if (p_desc.enumerable) {
        var desc = props[P];
        @DefineOwnProperty(O, P, desc);
      }
    }
    // 7. Return O.
    return O;
  }
  \\],
  24: [\\
  function seal (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O)
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.
      if (desc.configurable) desc.configurable = false;
      // c. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments.
      @DefineOwnProperty(O, P, desc);
    }
    // 3. Set the [[Extensible]] internal property of O to false.
    @Extensible(O, false);
    // 4. Return O.
    return O;
  }
  \\],
  25: [\\
  function freeze (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If IsDataDescriptor(desc) is true, then
      // i. If desc.[[Writable]] is true, set desc.[[Writable]] to false.
      desc.writable = false;
      // c. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.
      desc.configurable = false;
      // d. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments.
      @DefineOwnProperty(O, P, desc);
    }
    // 3. Set the [[Extensible]] internal property of O to false.
    @Extensible(O, false);
    // 4. Return O.
    return O;
  }
  \\],
  26: [\\
  function preventExtensions (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Set the [[Extensible]] internal property of O to false.
    @Extensible(O, false);
    // 3. Return O.
    return O;
  }
  \\],
  27: [\\
  function isSealed (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If desc.[[Configurable]] is true, then return false.
      if (desc.configurable) return false;
    }
    // 3. If the [[Extensible]] internal property of O is false, then return true.
    if (@Extensible(O) === false) return true;
    // 4. Otherwise, return false.
    else return false;
  }
  \\],
  28: [\\
  function isFrozen (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. For each named own property name P of O,
    var names = @getOwnPropertyNames(O);
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      // a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.
      var desc = @GetOwnProperty(O, P);
      // b. If IsDataDescriptor(desc) is true then
      // i. If desc.[[Writable]] is true, return false. c. If desc.[[Configurable]] is true, then return false.
      if (desc.writable || desc.configurable) return false;
    }
    // 3. If the [[Extensible]] internal property of O is false, then return true.
    if (@Extensible(O) === false) return true;
    // 4. Otherwise, return false.
    else return false;
  }
  \\],
  29: [\\
  function isExtensible (O) {
    // 1. If Type(O) is not Object throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Return the Boolean value of the [[Extensible]] internal property of O.
    return @Extensible(O);
  }
  \\],
  30: [\\
  function keys (O) {
    // 1. If the Type(O) is not Object, throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 2. Let n be the number of own enumerable properties of O
    var names = @getOwnPropertyNames(O);
    // 3. Let array be the result of creating a new Object as if by the expression new Array(n) where Array is
    //    the standard built-in constructor with that name.
    var array = [];
    var n = 0;
    // 4. Let index be 0.
    // 5. For each own enumerable property of O whose name String is P
    // a. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(index), the PropertyDescriptor {[[Value]]: P, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
    // b. Increment index by 1.
    for (var i = 0; i < names.length; i++) {
      var P = names[i];
      var desc = @GetOwnProperty(O, P);
      if (desc.enumerable) {
        @DefineOwnProperty(array, @ToString(n), {
          value: P,
          writable: true,
          enumerable: true,
          configurable: true
        });
        n++;
      }
    }
    array.length = n;
    // 6. Return array.
    return array;
  }
  \\],
  31: [\\
  function () {
  }
  \\],
  32: [\\
  function toString() {
    if (typeof this !== 'function') throw new TypeError();
    return @StrTop;
  }
  \\],
  33: [\\
  function apply (thisArg, argArray) {
    // 1. If IsCallable(func) is false, then throw a TypeError exception.
    if (@IsCallable(this) === false) throw new TypeError();
    // 2. If argArray is null or undefined, then
      // a. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and an empty list of arguments.
    if (argArray === null || argArray === undefined) return @Call(this, thisArg, []);
    // 3. If Type(argArray) is not Object, then throw a TypeError exception.
    if (typeof argArray !== 'function' && typeof argArray !== 'object' || argArray === null) throw new TypeError();
    // 4. Let len be the result of calling the [[Get]] internal method of argArray with argument "length".
    var len = argArray.length;
    // 5. Let n be ToUint32(len).
    var n = @ToUint32(len);
    // 6. Let argList be an empty List.
    var argList = [];
    // 7. Let index be 0.
    // 8. Repeat while index < n
    for (var index = 0; index < n; index++) {
      // a. Let indexName be ToString(index).
      // b. Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName as the argument.
      // c. Append nextArg as the last element of argList.
      // d. Set index to index + 1.
      argList[index] = argArray[index];
    }
    // 9. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and argList as the list of arguments.
    return @Call(this, thisArg, argList);
  }
  \\],
  34: [\\
  function call (thisArg) {
    // 1. If IsCallable(func) is false, then throw a TypeError exception.
    if (@IsCallable(this) === false) throw new TypeError();
    // 2. Let argList be an empty List.
    var argList = [];
    // 3. If this method was called with more than one argument then in left to right order starting with arg1 append each argument as the last element of argList
    for (var i = 1; i < arguments.length; i++) {
      argList[i-1] = arguments[i];
    }
    // 4. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and argList as the list of arguments.
    return @Call(this, thisArg, argList);
  }
  \\],
  35: [\\
  function bind (thisArg) {
    // 2. If IsCallable(Target) is false, throw a TypeError exception.
    if (@IsCallable(this) === false) throw new TypeError();
    // 3. Let A be a new (possibly empty) internal list of all of the argument values provided after thisArg (arg1, arg2 etc), in order.
    var A = [];
    for (var i = 1; i < arguments.length; i++) {
      A[i-1] = arguments[i];
    }
    // 4. Let F be a new native ECMAScript object.
    var F = {};
    // 5. Set all the internal methods, except for [[Get]], of F as specified in 8.12.
    // 6. Set the [[Get]] internal property of F as specified in 15.3.5.4.
    // 15.3.5.4. NOTE: Function objects created using Function.prototype.bind use the default [[Get]] internal method.
    // 7. Set the [[TargetFunction]] internal property of F to Target.
    @TargetFunction(F, this);
    // 8. Set the [[BoundThis]] internal property of F to the value of thisArg.
    @BoundThis(F, thisArg);
    // 9. Set the [[BoundArgs]] internal property of F to A.
    @BoundArgs(F, A);
    // 10. Set the [[Class]] internal property of F to "Function".
    @Class(F, "Function");
    // 11. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in 15.3.3.1.
    @Prototype(F, Function.prototype);
    // 12. Set the [[Call]] internal property of F as described in 15.3.4.5.1.
    @Call(F, @getLoc("BoundFunctionHelper"));
    // 13. Set the [[Construct]] internal property of F as described in 15.3.4.5.2.
    @Construct(F, @getLoc("BoundFunctionHelper"));
    // 14. Set the [[HasInstance]] internal property of F as described in 15.3.4.5.3.
    // TODO
    // 15. If the [[Class]] internal property of Target is "Function", then
    //      a. Let L be the length property of Target minus the length of A.
    //      b. Set the length own property of F to either 0 or L, whichever is larger.
    var len = 0;
    if (@Class(this) === "Function") {
      var L = this.length - A.length;
      if (L > 0) len = L;
    }
    // 16. Else set the length own property of F to 0.
    // 17. Set the attributes of the length own property of F to the values specified in 15.3.5.1.
    @DefineOwnProperty(F, "length", {
      value: len,
      writable: false,
      enumerable: false,
      configurable: false
    });
    // 18. Set the [[Extensible]] internal property of F to true.
    @Extensible(F, true);
    // 20. Call the [[DefineOwnProperty]] internal method of F with arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.
    // TODO
    // 21. Call the [[DefineOwnProperty]] internal method of F with arguments "arguments", PropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.
    // TODO
    // 22. Return F.
    return F;
  }
  \\],
  36: [\\
  function Function () {
    @NotYetImplemented("Function");
  }
  \\],
  37: [\\
  function Function () {
    @NotYetImplemented("Function");
  }
  \\],
  38: [\\
  function escape (string) {
    @NotYetImplemented("escape");
  }
  \\],
  39: [\\
  function unescape (string) {
    @NotYetImplemented("unescape");
  }
  \\],
  40: [\\
  function toString (radix) {
    // The toString function is not generic; it throws a TypeError exception if its this value is not a Number or a Number object.
    if (!@SameValue(typeof this,'number') && !@SameValue(@Class(this), 'Number')){
      throw new TypeError();
    }
    // If radix not present or is undefined the Number 10 is used as the value of radix.
    if (arguments.length === 0 || @SameValue(radix,undefined)){
      var radix = 10;
    }
    else {
      radix = @ToInteger(radix);
    }
    // If ToInteger(radix) is the Number 10 then this Number value is given as an argument to the ToString abstract operation; the resulting String value is returned.
    var thisNumberValue = this;
    if (@isObject(this)) thisNumberValue = @PrimitiveValue(this)
    if (radix === 10) {
      return @ToString(thisNumberValue);
    }
    // If ToInteger(radix) is not an integer between 2 and 36 inclusive throw a RangeError exception.
    else if (radix < 2 || radix > 36){
      throw new RangeError();
    }
    // If ToInteger(radix) is an integer from 2 to 36, but not 10, the result is a String representation of this Number value using the specified radix. Letters a-z are used for digits with values 10 through 35. The precise algorithm is implementation-dependent if the radix is not 10, however the algorithm should be a generalisation of that specified in 9.8.1.
    return @StrTop;
  }
  \\],
  41: [\\
  function toLocaleString () {
    if (!@SameValue(typeof this,'number') && !@SameValue(@Class(this), 'Number')){
      throw new TypeError();
    }
    return @ToString(this);
  }
  \\],
  42: [\\
  function valueOf () {
    // The valueOf function is not generic; it throws a TypeError exception if its this value is not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.
    if (typeof this === "number") return this;
    else if (typeof this === "object" && this !== null && @Class(this) === "Number") return @PrimitiveValue(this);
    else throw new TypeError();
  }
  \\],
  43: [\\
  function toFixed (fractionDigits){
    // 1. Let f be ToInteger(fractionDigits). (If fractionDigits is undefined, this step produces the value 0).
    var f = @ToInteger(fractionDigits);
    // 2. If f < 0 or f > 20, throw a RangeError exception.
    if (f < 0 || f > 20) {
      throw new RangeError();
    }
    // 3. Let x be this Number value.
    var thisNumberValue = this;
    if (@isObject(this)) thisNumberValue = @PrimitiveValue(this)
    var x = thisNumberValue
    // 4. If x is NaN, return the String "NaN".
    if (@SameValue(x,NaN)) {
      return "NaN";
    }
    // TODO ...
    return @StrTop;
  }
  \\],
  44: [\\
  function toExponential (fractionDigits) {
    // 1. Let x be this Number value.
    var thisNumberValue = this;
    if (@isObject(this)) thisNumberValue = @PrimitiveValue(this)
    var x = thisNumberValue;
    // 2. Let f be ToInteger(fractionDigits).
    var f = @ToInteger(fractionDigits);
    // 3. If x is NaN, return the String "NaN".
    if (@SameValue(x,NaN)) {
      return "NaN"
    }
    // TODO ...
    // 7. If fractionDigits is not undefined and (f < 0 or f > 20), throw a RangeError exception.
    if ((!@SameValue(fractionDigits,undefined)) && (f < 0 || f > 20)) {
      throw new RangeError();
    }
    // TODO ...
    return @StrTop;
  }
  \\],
  45: [\\
  function toPrecision (precision) {
    // 1. Let x be this Number value.
    var thisNumberValue = this;
    if (@isObject(this)) thisNumberValue = @PrimitiveValue(this)
    var x = thisNumberValue;
    // 2. If precision is undefined, return ToString(x).
    if (@SameValue(precision,undefined)) {
      return @ToString(x);
    }
    // 3. Let p be ToInteger(precision).
    var p = @ToInteger(precision);
    // 4. If x is NaN, return the String "NaN".
    if (@SameValue(NaN,x)) {
      return "NaN";
    }
    // TODO ...
    // 8. If p < 1 or p > 21, throw a RangeError exception.
    if (p < 1 || p > 21) {
      throw new RangeError();
    }
    // TODO
    return @StrTop;
  }
  \\],
  46: [\\
  function Number (value) {
    if(arguments.length === 0){
      return +0;
    }else{
      return @ToNumber(value);
    }
  }
  \\],
  47: [\\
  function Number (value) {
    if (arguments.length === 0) {
      return @NumObj(+0);
    } else {
      return @NumObj(value);
    }
  }
  \\],
  48: [\\
  function () {
  }
  \\],
  49: [\\
  function toString () {
    // This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the Date in the current time zone in a convenient, human-readable form.
    return @ToString(this);
  }
  \\],
  50: [\\
  function toDateString () {
    // This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the ―date‖ portion of the Date in the current time zone in a convenient, human-readable form.
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(0,i);
  }
  \\],
  51: [\\
  function toTimeString () {
    // This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the ―time‖ portion of the Date in the current time zone in a convenient, human-readable form.
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(i);
  }
  \\],
  52: [\\
  function toLocaleString () {
    return @ToString(this);
  }
  \\],
  53: [\\
  function toLocaleDateString() {
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(0,i);
  }
  \\],
  54: [\\
  function toLocaleTimeString () {
    var S = @ToString(this);
    b = 0;
    for (var i = 0; i < S.length; i++) {
      if (S[i] === " ") {
        b += 1;
      }
      if (b === 3) {
        break;
      }
    }
    return S.slice(i);
  }
  \\],
  55: [\\
  function valueOf () {
    // The valueOf function returns a Number, which is this time value.
    return @PrimitiveValue(this);
  }
  \\],
  56: [\\
  function getTime () {
    // 1. Return this time value.
    return @PrimitiveValue(this);
  }
  \\],
  57: [\\
  function getFullYear () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  58: [\\
  function getUTCFullYear () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return YearFromTime(t).
    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;
    return YearFromTime_t;
  }
  \\],
  59: [\\
  function getMonth() {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  60: [\\
  function getUTCMonth () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return MonthFromTime(t).
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var DayWithinYear_t = Day_t - DayFromYear_y

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    if (y % 4 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 4 === 0 && y % 100 !== 0) {
      var DaysInYear_y = 366;
    }else if (y % 100 === 0 && y % 400 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 400 === 0) {
      var DaysInYear_y = 366;
    }

    if (DaysInYear_y === 365) {
      var InLeapYear_t = 0;
    }else {
      var InLeapYear_t = 1;
    }

    if (0 <= DayWithinYear_t < 31) {
      var MonthFromTime_t = 0;
    }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
      var MonthFromTime_t = 1;
    }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
      var MonthFromTime_t = 2;
    }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
      var MonthFromTime_t = 3;
    }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
      var MonthFromTime_t = 4;
    }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
      var MonthFromTime_t = 5;
    }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
      var MonthFromTime_t = 6;
    }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
      var MonthFromTime_t = 7;
    }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
      var MonthFromTime_t = 8;
    }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
      var MonthFromTime_t = 9;
    }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
      var MonthFromTime_t = 10;
    }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
      var MonthFromTime_t = 11;
    }
    return MonthFromTime_t;
  }
  \\],
  61: [\\
  function getDate () {
    // Need LocalTime(t);
    return @NumTop;
  }
  \\],
  62: [\\
  function getUTCDate () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return DateFromTime(t).

    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var DayWithinYear_t = Day_t - DayFromYear_y

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    if (y % 4 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 4 === 0 && y % 100 !== 0) {
      var DaysInYear_y = 366;
    }else if (y % 100 === 0 && y % 400 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 400 === 0) {
      var DaysInYear_y = 366;
    }

    if (DaysInYear_y === 365) {
      var InLeapYear_t = 0;
    }else {
      var InLeapYear_t = 1;
    }

    if (0 <= DayWithinYear_t < 31) {
      var MonthFromTime_t = 0;
    }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
      var MonthFromTime_t = 1;
    }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
      var MonthFromTime_t = 2;
    }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
      var MonthFromTime_t = 3;
    }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
      var MonthFromTime_t = 4;
    }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
      var MonthFromTime_t = 5;
    }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
      var MonthFromTime_t = 6;
    }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
      var MonthFromTime_t = 7;
    }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
      var MonthFromTime_t = 8;
    }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
      var MonthFromTime_t = 9;
    }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
      var MonthFromTime_t = 10;
    }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
      var MonthFromTime_t = 11;
    }

    if (MonthFromTime_t === 0) {
      var DateFromTime = DayWithinYear_t + 1;
    }else if (MonthFromTime_t === 1) {
      var DateFromTime = DayWithinYear_t - 30;
    }else if (MonthFromTime_t === 2) {
      var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
    }else if (MonthFromTime_t === 3) {
      var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
    }else if (MonthFromTime_t === 4) {
      var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
    }else if (MonthFromTime_t === 5) {
      var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
    }else if (MonthFromTime_t === 6) {
      var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
    }else if (MonthFromTime_t === 7) {
      var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
    }else if (MonthFromTime_t === 8) {
      var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
    }else if (MonthFromTime_t === 9) {
      var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
    }else if (MonthFromTime_t === 10) {
      var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
    }else if (MonthFromTime_t === 11) {
      var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
    }
    return DateFromTime;
  }
  \\],
  63: [\\
  function getDay () {
    // Need Localtime(t);
    return @NumTop;
  }
  \\],
  64: [\\
  function getUTCDay () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return WeekDay(t).
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var WeekDay_t = (Day_t + 4) % 7;
    return WeekDay_t;
  }
  \\],
  65: [\\
  function getHours () {
    // Need Local(t)
    return @NumTop;
  }
  \\],
  66: [\\
  function getUTCHours () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return HourFromTime(t).
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    return HourFromTime_t;
  }
  \\],
  67: [\\
  function getMinutes () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  68: [\\
  function getUTCMinutes () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return MinFromTime(t).
    var MinutesPerHour = 60;
    var msPerMinute = 60000;
    var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
    return MinFromTime_t;
  }
  \\],
  69: [\\
  function getSeconds () {
    // Need LocalTime(t);
    return @NumTop;
  }
  \\],
  70: [\\
  function getUTCSeconds () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return SecFromTime(t).
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
    return SecFromTime_t;
  }
  \\],
  71: [\\
  function getMilliseconds () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  72: [\\
  function getUTCMilliseconds () {
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. If t is NaN, return NaN.
    if (@SameValue(t,NaN)) {
      return NaN;
    }
    // 3. Return msFromTime(t).
    var msPerSecond = 1000;
    var msFromTime_t = t % msPerSecond;
    return msFromTime_t;
  }
  \\],
  73: [\\
  function getTimezoneOffset () {
    // Need LocalTime(t)
    return @NumTop;
  }
  \\],
  74: [\\
  function setTime (time) {
    // 1. Let v be TimeClip(ToNumber(time)).
    var time = @ToNumber(time);
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    //  2. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this,v);
    // 3. Return v.
    return v;
  }
  \\],
  75: [\\
  function setMilliseconds (ms) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  76: [\\
  function setUTCMilliseconds (ms) {
    /* TODO
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ToNumber(ms)).
    var arg1;
    var arg2;
    var arg3;
    var arg4;
    // HourFromTime(t)
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    arg1 = HourFromTime_t;
    // MinFromTime(t)
    var MinutesPerHour = 60;
    var msPerMinute = 60000;
    var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
    arg2 = MinFromTime_t;
    // SecFromTime(t)
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
    arg3 = SecFromTime_t;
    arg4 = @ToNumber(ms);
    // MakeTime
    var hour = arg1;
    var min = arg2;
    var sec = arg3;
    var ms = arg4;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;

    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    var time = return_val;
    // 3. Let v be TimeClip(MakeDate(Day(t), time)).
    var arg1;
    var arg2 = time;
    var arg3;
    // Day(t)
    var t = @PrimitiveValue(this);
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg1 = Day_t;
    // MakeDate
    var day = arg1;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    arg3 = return_val;
    // TimeClip
    var time = arg3;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      var v = return_val;
    }
    */
    // 4. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this, @NumTop);
    // 5. Return v.
    return @NumTop;
  }
  \\],
  77: [\\
  function setSeconds (sec,ms) {
    // Need LocalTime(t);
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  78: [\\
  function setUTCSeconds (set,ms) {
    /* TODO
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let s be ToNumber(sec).
    var s = @ToNumber(sec);
    // 3. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
    if (!(arguments.length > 1)) {
      var msPerSecond = 1000;
      var msFromTime_t = t % msPerSecond;
      var milli = msFromTime_t;
    }else {
      var milli = @ToNumber(ms);
    }
    // 4. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).
    var arg1;
    var arg2;
    var arg3;
    var arg4;
    // HourFromTime(t)
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    arg1 = HourFromTime_t;
    // MinFromTime(t);
    var MinutesPerHour = 60;
    var msPerMinute = 60000;
    var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
    arg2 = MinFromTime_t;
    // Day(t)
    msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg3 = Day_t;
    // MakeTime
    var hour = arg1;
    var min = arg2;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;

    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg4 = return_val;
    // MakeDate(t)
    var day = arg3;
    var time = arg4;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var date = return_val;
    // 5. Let v be TimeClip(date).
    var time = date;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if(@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    */
    // 6. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this, @NumTop);
    // 7. Return v.
    return @NumTop;
  }
  \\],
  79: [\\
  function setMinutes (min,sec,ms) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  80: [\\
  function setUTCMinutes (min,sec,ms) {
    /* TODO
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    //2. Let m be ToNumber(min).
    var m = @ToNumber(min);
    // 3. If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
    if (!(arguments.length > 1)) {
      var SecondsPerMinute= 60;
      var msPerSecond = 1000;
      var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
      var sec = SecFromTime_t;
    }else {
      var s = @ToNumber(sec);
    }
    // 4. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
    if (!(arguments.length > 2)) {
      var msPerSecond = 1000;
      var msFromTime_t = t % msPerSecond;
      var milli = msFromTime_t;
    }else {
      var milli = @ToNumber(ms);
    }
    // 5. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).
    var arg1;
    var arg2;
    var arg3;
    // HourFromTime(t)
    var HoursPerDay = 24;
    var msPerHour = 3600000;
    var HourFromTime_t = @floor(t / msPerHour) % HoursPerDay;
    arg1 = HourFromTime_t;
    // Day(t)
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg2 = Day_t;
    // MakeTime
    var hour = arg1;
    var min = m;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;


    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var mlli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg3 = return_val;
    // MakeDate
    var day = arg2;
    var time = arg3;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
    return_val = day * msPerDay + time;
    }
    var date = return_val;
    // 6. Let v be TimeClip(date).
    // TimeClip
    var time = date;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    */
    // 7. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this, @NumTop);
    //8. Return v.
    return @NumTop;
  }
  \\],
  81: [\\
  function setHours (hour,min,sec,ms) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  82: [\\
  function setUTCHours (hour,min,sec,ms) {
    /* TODO
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let h be ToNumber(hour).
    var h = @ToNumber(hour);
    // 3. If min is not specified, then let m be MinFromTime(t); otherwise, let m be ToNumber(min).
    if (!(arguments.length > 1)) {
      var MinutesPerHour = 60;
      var msPerMinute = 60000;
      var MinFromTime_t = @floor(t / msPerMinute) % MinutesPerHour;
      var m = MinFromTime_t;
    }else {
      var m = @ToNumber(min);
    }
    // 4. If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
    if (!(arguments.length > 2)) {
      var SecondsPerMinute= 60;
      var msPerSecond = 1000;
      var SecFromTime_t  = @floor(t / msPerSecond) % SecondsPerMinute;
      var s = SecFromTime_t;
    }else {
      var s = @ToNumber(sec);
    }
    // 5. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
    if (!(arguments.length > 3)) {
      var msPerSecond = 1000;
      var msFromTime_t = t % msPerSecond;
      var ms = msFromTime_t;
    }else {
      var milli = @ToNumber(ms);
    }
    // 6. Let newDate be MakeDate(Day(t), MakeTime(h, m, s, milli)).
    var arg1;
    var arg2;
    // Day(t)
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);
    arg1 = Day_t;
    // MakeTime
    var hour = h;
    var min = m;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;


    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg2 = return_val;
    // MakeDate
    var day = arg1;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 7. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    */
    // 8. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this, @NumTop);
    // 9. Return v.
    return @NumTop;
  }
  \\],
  83: [\\
  function setDate (date) {
    // Need LocalTime(t)
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  84: [\\
  function setUTCDate (date) {
    /*
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let dt be ToNumber(date).
    var dt = @ToNumber(date);
    // 3. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).
    var arg1;
    var arg2;
    var arg3;
    var arg4;
    // YearFromTime(t);
    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;
    arg1 = YearFromTime_t;
    // MonthFromTime(t)
    var msPerDay = 86400000;
    var Day_t = @floor(t/msPerDay);

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var DayWithinYear_t = Day_t - DayFromYear_y

    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;

    var y = YearFromTime_t;

    if (y % 4 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 4 === 0 && y % 100 !== 0) {
      var DaysInYear_y = 366;
    }else if (y % 100 === 0 && y % 400 !== 0) {
      var DaysInYear_y = 365;
    }else if (y % 400 === 0) {
      var DaysInYear_y = 366;
    }

    if (DaysInYear_y === 365) {
      var InLeapYear_t = 0;
    }else {
      var InLeapYear_t = 1;
    }

    if (0 <= DayWithinYear_t < 31) {
      var MonthFromTime_t = 0;
    }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
      var MonthFromTime_t = 1;
    }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
      var MonthFromTime_t = 2;
    }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
      var MonthFromTime_t = 3;
    }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
      var MonthFromTime_t = 4;
    }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
      var MonthFromTime_t = 5;
    }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
      var MonthFromTime_t = 6;
    }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
      var MonthFromTime_t = 7;
    }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
      var MonthFromTime_t = 8;
    }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
      var MonthFromTime_t = 9;
    }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
      var MonthFromTime_t = 10;
    }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
      var MonthFromTime_t = 11;
    }
    arg2 = MonthFromTime_t;
    // TimeWithinDay(t)
    var msPerDay = 86400000;
    var TimeWithinDay_t = t % msPerDay;
    arg3 = TimeWithinDay_t;
    // MakeDay
    var year = arg1;
    var month = arg2;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg4 = return_val;
    // Makedate
    var day = arg4;
    var time = arg3;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 4. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    */
    // 5. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this, @NumTop);
    // 6. Return v.
    return @NumTop;
  }
  \\],
  85: [\\
  function setMonth (month,date) {
    // Need LocalTime(t);
    @PrimitiveValue(this, @NumTop);
    return @NumTop;
  }
  \\],
  86: [\\
  function setUTCMonth (month,date) {
    /* TODO
    // 1. Let t be this time value.
    var t = @PrimitiveValue(this);
    // 2. Let m be ToNumber(month).
    var m = @ToNumber(month);
    // 3. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
    if (!(arguments.length > 1)) {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var DayWithinYear_t = Day_t - DayFromYear_y

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var msPerDay = 86400000;
      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      if (y % 4 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 4 === 0 && y % 100 !== 0) {
        var DaysInYear_y = 366;
      }else if (y % 100 === 0 && y % 400 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 400 === 0) {
        var DaysInYear_y = 366;
      }

      if (DaysInYear_y === 365) {
        var InLeapYear_t = 0;
      }else {
        var InLeapYear_t = 1;
      }

      if (0 <= DayWithinYear_t < 31) {
        var MonthFromTime_t = 0;
      }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
        var MonthFromTime_t = 1;
      }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
        var MonthFromTime_t = 2;
      }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
        var MonthFromTime_t = 3;
      }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
        var MonthFromTime_t = 4;
      }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
        var MonthFromTime_t = 5;
      }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
        var MonthFromTime_t = 6;
      }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
        var MonthFromTime_t = 7;
      }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
        var MonthFromTime_t = 8;
      }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
        var MonthFromTime_t = 9;
      }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
        var MonthFromTime_t = 10;
      }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
        var MonthFromTime_t = 11;
      }

      if (MonthFromTime_t === 0) {
        var DateFromTime = DayWithinYear_t + 1;
      }else if (MonthFromTime_t === 1) {
        var DateFromTime = DayWithinYear_t - 30;
      }else if (MonthFromTime_t === 2) {
        var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
      }else if (MonthFromTime_t === 3) {
        var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
      }else if (MonthFromTime_t === 4) {
        var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
      }else if (MonthFromTime_t === 5) {
        var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
      }else if (MonthFromTime_t === 6) {
        var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
      }else if (MonthFromTime_t === 7) {
        var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
      }else if (MonthFromTime_t === 8) {
        var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
      }else if (MonthFromTime_t === 9) {
        var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
      }else if (MonthFromTime_t === 10) {
        var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
      }else if (MonthFromTime_t === 11) {
        var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
      }
      var dt = DateFromTime;
    }else {
      @ToNumber(date);
    }
    // 4. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).
    var arg1;
    var arg2;
    var arg3;
    // YearFromTime(t)
    var y = 0;
    var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

    var msPerDay = 86400000;
    var TimeFromYear_y = msPerDay * DayFromYear_y;

    while (TimeFromYear_y <= t) {
      y += 1;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;
    }
    y -= 1;
    var YearFromTime_t = y;
    arg1 = YearFromTime_t;
    // TimeWithinDay(t)
    var msPerDay = 86400000;
    var TimeWithinDay_t = t % msPerDay;
    arg2 = TimeWithinDay_t;
    // MakeDay
    var year = arg1;
    var month = m;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }
      else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg3 = return_val;
    // MakeDate
    var day = arg3;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 5. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    */
    // 6. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this, @NumTop);
    // 7. Return v.
    return @NumTop;
  }
  \\],
  87: [\\
  function setFullYear (year,month,date) {
    // Need LocalTime(t);
    @PrimitiveValue(this,@NumTop);
    return @NumTop;
  }
  \\],
  88: [\\
  function setUTCFullYear (year,month,date) {
    /* TODO
    // 1. Let t be this time value; but if this time value is NaN, let t be +0.
    var t = @PrimitiveValue(this);
    if (@SameValue(t,NaN)) {
      var t = 0;
    }
    // 2. Let y be ToNumber(year).
    var y = @ToNumber(year);
    // 3. If month is not specified, then let m be MonthFromTime(t); otherwise, let m be ToNumber(month).
    if (!(arguments.length > 1)) {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var DayWithinYear_t = Day_t - DayFromYear_y

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var msPerDay = 86400000;
      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      if (y % 4 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 4 === 0 && y % 100 !== 0) {
        var DaysInYear_y = 366;
      }else if (y % 100 === 0 && y % 400 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 400 === 0) {
        var DaysInYear_y = 366;
      }

      if (DaysInYear_y === 365) {
        var InLeapYear_t = 0;
      }else {
        var InLeapYear_t = 1;
      }

      if (0 <= DayWithinYear_t < 31) {
        var MonthFromTime_t = 0;
      }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
        var MonthFromTime_t = 1;
      }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
        var MonthFromTime_t = 2;
      }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
        var MonthFromTime_t = 3;
      }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
        var MonthFromTime_t = 4;
      }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
        var MonthFromTime_t = 5;
      }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
        var MonthFromTime_t = 6;
      }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
        var MonthFromTime_t = 7;
      }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
        var MonthFromTime_t = 8;
      }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
        var MonthFromTime_t = 9;
      }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
        var MonthFromTime_t = 10;
      }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
        var MonthFromTime_t = 11;
      }
      var m = MonthFromTime_t;
    }else {
      var m = @ToNumber(m);
    }
    // 4. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
    if (!(arguments.length > 0)) {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var DayWithinYear_t = Day_t - DayFromYear_y

      var y = 0;
      var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

      var msPerDay = 86400000;
      var TimeFromYear_y = msPerDay * DayFromYear_y;

      while (TimeFromYear_y <= t) {
        y += 1;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;
      }
      y -= 1;
      var YearFromTime_t = y;

      var y = YearFromTime_t;

      if (y % 4 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 4 === 0 && y % 100 !== 0) {
        var DaysInYear_y = 366;
      }else if (y % 100 === 0 && y % 400 !== 0) {
        var DaysInYear_y = 365;
      }else if (y % 400 === 0) {
        var DaysInYear_y = 366;
      }

      if (DaysInYear_y === 365) {
        var InLeapYear_t = 0;
      }else {
        var InLeapYear_t = 1;
      }

      if (0 <= DayWithinYear_t < 31) {
        var MonthFromTime_t = 0;
      }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
        var MonthFromTime_t = 1;
      }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
        var MonthFromTime_t = 2;
      }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
        var MonthFromTime_t = 3;
      }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
        var MonthFromTime_t = 4;
      }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
        var MonthFromTime_t = 5;
      }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
        var MonthFromTime_t = 6;
      }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
        var MonthFromTime_t = 7;
      }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
        var MonthFromTime_t = 8;
      }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
        var MonthFromTime_t = 9;
      }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
        var MonthFromTime_t = 10;
      }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
        var MonthFromTime_t = 11;
      }

      if (MonthFromTime_t === 0) {
        var DateFromTime = DayWithinYear_t + 1;
      }else if (MonthFromTime_t === 1) {
        var DateFromTime = DayWithinYear_t - 30;
      }else if (MonthFromTime_t === 2) {
        var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
      }else if (MonthFromTime_t === 3) {
        var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
      }else if (MonthFromTime_t === 4) {
        var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
      }else if (MonthFromTime_t === 5) {
        var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
      }else if (MonthFromTime_t === 6) {
        var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
      }else if (MonthFromTime_t === 7) {
        var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
      }else if (MonthFromTime_t === 8) {
        var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
      }else if (MonthFromTime_t === 9) {
        var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
      }else if (MonthFromTime_t === 10) {
        var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
      }else if (MonthFromTime_t === 11) {
        var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
      }
      var dt = DateFromTime;
    }else {
      var dt = @ToNumber(dt);
    }
    // 5. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).
    var arg1;
    var arg2;
    // TimeWithinDay(t)
    var msPerDay = 86400000;
    var TimeWithinDay_t = t % msPerDay;
    arg1 = TimeWithinDay_t;
    // MakeDay
    var year = y;
    var month = m;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }
      else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg2 = return_val;
    // MakeDate
    var day = arg2;
    var time = arg1;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    var newDate = return_val;
    // 6. Let v be TimeClip(newDate).
    var time = newDate;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    var v = return_val;
    */
    // 7. Set the [[PrimitiveValue]] internal property of this Date object to v.
    @PrimitiveValue(this, @NumTop);
    // 8. Return v.
    return @NumTop;
  }
  \\],
  89: [\\
  function toUTCString () {
    // Need to know internal structure of Date object
    return @StrTop;
  }
  \\],
  90: [\\
  function toISOString () {
		// TypeError is thrown when this is any other objects instead of Date object
		if (!(this instanceof Date)) throw new TypeError();
    // Need to know internal structure of Date object
    var t = @PrimitiveValue(this);
    if (@SameValue(t,Infinity) || @SameValue(t,-Infinity) || @SameValue(t,NaN)) {
      throw new RangeError();
    }
    return @StrTop;
  }
  \\],
  91: [\\
  function toJSON (key) {
    @NotYetImplemented("Date.prototype.toJSON")
  }
  \\],
  92: [\\
  function Date (year,month,date,hours,minutes,seconds,ms) {
    // All of the arguments are optional; any arguments supplied are accepted but are completely ignored. A String is created and returned as if by the expression (new Date()).toString()
    return (new Date()).toString();
  }
  \\],
  93: [\\
  function Date () {
    /* TODO
    if (arguments.length === 0) {
      var obj = {};
      @Prototype(obj, Date.prototype);
      @Class(obj, "Date");
      @Extensible(obj, true);
      @PrimitiveValue(obj, @NumTop);
      return obj;
    }else if (arguments.length === 1) {
      var value = arguments[0];
      // 1. Let v be ToPrimitive(value).
      var v = @ToPrimitive(value);
      // 2. If Type(v) is String, then
      if (@SameValue(typeof v,"string")) {
        // a. Parse v as a date, in exactly the same manner as for the parse method (15.9.4.2); let V be the time value for this date.
        var V = Date.parse(v)
      }
      // 3. Else, let V be ToNumber(v).
      else {
        var V = @ToNumber(v);
      }
      // 4. Set the [[PrimitiveValue]] internal property of the newly constructed object to TimeClip(V) and return.
      var time = V;
      var return_val;
      if (!isFinite(time)) {
        return_val = NaN;
      }
      else if (@abs(time) > 8.64e+15) {
        return_val = NaN;
      }else {
        return_val = @ToInteger(time);
      }
      var obj = {};
      @Prototype(obj, Date.prototype);
      @Class(obj, "Date");
      @Extensible(obj, true);
      @PrimitiveValue(obj, return_val);
      return obj;
    }else if (arguments.length > 1) {
      var year = arguments[0];
      var month = arguments[1];
      // 1. Let y be ToNumber(year).
      var y = @ToNumber(year);
      // 2. Let m be ToNumber(month).
      var m = @ToNumber(month);
      // 3. If date is supplied then let dt be ToNumber(date); else let dt be 1.
      if (arguments.length > 2) {
        var dt = @ToNumber(arguments[2]);
      }else {
        var dt = 1;
      }
      // 4. If hours is supplied then let h be ToNumber(hours); else let h be 0.
      if (arguments.length > 3) {
        var h = @ToNumber(arguments[3]);
      }else {
        var h = 0;
      }
      // 5. If minutes is supplied then let min be ToNumber(minutes); else let min be 0.
      if (arguments.length > 4) {
        var min = @ToNumber(arguments[4]);
      }else {
        var min = 0;
      }
      // 6. If seconds is supplied then let s be ToNumber(seconds); else let s be 0.
      if (arguments.length > 5) {
        var s = @ToNumber(arguments[5]);
      }else {
        var s = 0;
      }
      // 7. If ms is supplied then let milli be ToNumber(ms); else let milli be 0.
      if (arguments.length > 6) {
        var milli = @ToNumber(arguments[6]);
      }else {
        milli = 0;
      }
      // 8. If y is not NaN and 0   ToInteger(y)   99, then let yr be 1900+ToInteger(y); otherwise, let yr be y.
      if (!@SameValue(y,NaN) && (0 <= @ToInteger(y) && @ToInteger(y) <= 99)) {
        var yr = 1900 + @ToInteger(t);
      }else {
        var yr = y;
      }
      // 9. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).
      var arg1;
      var arg2;
      // MakeDay
      var year = yr;
      var month = m;
      var date = dt;
      var return_val;
      if (year === Infinity || month === Infinity || date === Infinity) {
        return_val = NaN;
      }else {
        var y = @ToInteger(year);
        var m = @ToInteger(month);
        var dt = @ToInteger(date);
        var ym = y + @floor(m/12);
        var mn = m % 12;
        var t = 0;
        while (t < 8.64e+15) {
          // YearFromTime(t)
          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;
          if (YearFromTime_t === ym) {
            // MonthFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var msPerDay = 86400000;
            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            if (y % 4 !== 0) {
              var DaysInYear_y = 365;
            }else if (y % 4 === 0 && y % 100 !== 0) {
              var DaysInYear_y = 366;
            }else if (y % 100 === 0 && y % 400 !== 0) {
              var DaysInYear_y = 365;
            }else if (y % 400 === 0) {
              var DaysInYear_y = 366;
            }

            if (DaysInYear_y === 365) {
              var InLeapYear_t = 0;
            }else {
              var InLeapYear_t = 1;
            }

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }
            if (MonthFromTime_t === mn) {
              // DateFromTime(t)
              var msPerDay = 86400000;
              var Day_t = @floor(t/msPerDay);

              var y = 0;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;

              while (TimeFromYear_y <= t) {
                y += 1;
                var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

                var TimeFromYear_y = msPerDay * DayFromYear_y;
              }
              y -= 1;
              var YearFromTime_t = y;

              var y = YearFromTime_t;

              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var DayWithinYear_t = Day_t - DayFromYear_y

              if (0 <= DayWithinYear_t < 31) {
                var MonthFromTime_t = 0;
              }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
                var MonthFromTime_t = 1;
              }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
                var MonthFromTime_t = 2;
              }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
                var MonthFromTime_t = 3;
              }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
                var MonthFromTime_t = 4;
              }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
                var MonthFromTime_t = 5;
              }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
                var MonthFromTime_t = 6;
              }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
                var MonthFromTime_t = 7;
              }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
                var MonthFromTime_t = 8;
              }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
                var MonthFromTime_t = 9;
              }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
                var MonthFromTime_t = 10;
              }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
                var MonthFromTime_t = 11;
              }

              if (MonthFromTime_t === 0) {
                var DateFromTime = DayWithinYear_t + 1;
              }else if (MonthFromTime_t === 1) {
                var DateFromTime = DayWithinYear_t - 30;
              }else if (MonthFromTime_t === 2) {
                var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
              }else if (MonthFromTime_t === 3) {
                var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
              }else if (MonthFromTime_t === 4) {
                var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
              }else if (MonthFromTime_t === 5) {
                var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
              }else if (MonthFromTime_t === 6) {
                var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
              }else if (MonthFromTime_t === 7) {
                var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
              }else if (MonthFromTime_t === 8) {
                var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
              }else if (MonthFromTime_t === 9) {
                var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
              }else if (MonthFromTime_t === 10) {
                var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
              }else if (MonthFromTime_t === 11) {
                var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
              }
              if (DateFromTime === 1){
                break;
              }
            }
          }
          t += 1;
        }
        if (t === 8.64e+15) {
          return_val = NaN;
        }
        else {
        var msPerDay = 86400000;
        var Day_t = @floor(t/msPerDay);
        return_val = Day_t + dt - 1;
        }
      }
      arg1 = return_val;
      //  MakeTime
      var hour = h;
      var sec = s;
      var ms = milli;
      var return_val;

      var HoursPerDay = 24;
      var MinutesPerHour = 60;
      var SecondsPerMinute= 60;
      var msPerSecond = 1000;
      var msPerMinute = 60000;
      var msPerHour = 3600000;


      if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
        return_val = NaN;
      }else {
        var h = @ToInteger(hour);
        var m = @ToInteger(min);
        var s = @ToInteger(sec);
        var milli = @ToInteger(ms);
        var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
        return_val = t;
      }
      arg2 = return_val;
      // MakeDate
      var day = arg1;
      var time = arg2;
      var return_val;
      var msPerDay = 86400000;
      if (day === Infinity || time === Infinity) {
        return_val = NaN;
      }else {
        return_val = day * msPerDay + time;
      }
      var finalDate = return_val;
      // 10. Set the [[PrimitiveValue]] internal property of the newly constructed object to TimeClip(UTC(finalDate)
      // TODO Need UTC(t) -> Need LocalTZA
      var time = finalDate;
      var return_val;
      if (time === Infinity || time === -Infinity || @SameValue(time,NaN)) {
        return_val = NaN;
      }else if (@abs(time) > 8.64e+15) {
        return_val = NaN;
      }else {
        return_val = @ToInteger(time);
      }
      var obj = {};
      @Prototype(obj, Date.prototype);
      @Class(obj, "Date");
      @Extensible(obj, true);
      @PrimitiveValue(obj, return_val);
      return obj;
    }
    */
    var obj = {};
    @Prototype(obj, Date.prototype);
    @Class(obj, "Date");
    @Extensible(obj, true);
    @PrimitiveValue(obj, @NumTop);
    return obj;
  }
  \\],
  94: [\\
  function parse () {
    // TODO
    return @NumTop;
  }
  \\],
  95: [\\
  function UTC (year,month,date,hours,minutes,seconds,ms) {
    /* TODO
    // 1. Let y be ToNumber(year).
    var y = @ToNumber(year);
    // 2. Let m be ToNumber(month).
    var m = @ToNumber(month);
    // 3. If date is supplied then let dt be ToNumber(date); else let dt be 1.
    if (arguments.length > 2) {
      var dt = @ToNumber(date);
    }else {
      var dt = 1;
    }
    // 4. If hours is supplied then let h be ToNumber(hours); else let h be 0.
    if (arguments.length > 3) {
      var h = @ToNumber(hours);
    }else {
      var h = 0;
    }
    // 5. If minutes is supplied then let min be ToNumber(minutes); else let min be 0.
    if (arguments.length > 4) {
      var min = @ToNumber(minutes);
    }else {
      var min = 0;
    }
    // 6. If seconds is supplied then let s be ToNumber(seconds); else let s be 0.
    if (arguments.length > 5) {
      var s = @ToNumber(seconds);
    }else {
      var s = 0;
    }
    // 7. If ms is supplied then let milli be ToNumber(ms); else let milli be 0.
    if (arguments. length > 6) {
      var milli = @ToNumber(ms);
    }else {
      var milli = 0;
    }
    // 8. If y is not NaN and 0   ToInteger(y)   99, then let yr be 1900+ToInteger(y); otherwise, let yr be y.
    if (!@SameValue(y,NaN) && (0 <= @ToInteger(y) && @ToInteger(y) <= 99)) {
      var yr = 1900 + @ToInteger(y);
    }else {
      var yr = y;
    }
    // 9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).
    var arg1; // MakeDay(yr,m,dt)
    var arg2; // MakeTime(h, min, s, milli);
    var arg3; // MakeDate(arg1,arg2)
    // MakeDay(yr,m,dt);
    var year = yr;
    var month = m;
    var date = dt;
    var return_val;
    if (year === Infinity || month === Infinity || date === Infinity) {
      return_val = NaN;
    }else {
      var y = @ToInteger(year);
      var m = @ToInteger(month);
      var dt = @ToInteger(date);
      var ym = y + @floor(m/12);
      var mn = m % 12;
      var t = 0;
      while (t < 8.64e+15) {
        // YearFromTime(t)
        var y = 0;
        var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

        var TimeFromYear_y = msPerDay * DayFromYear_y;

        while (TimeFromYear_y <= t) {
          y += 1;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;
        }
        y -= 1;
        var YearFromTime_t = y;
        if (YearFromTime_t === ym) {
          // MonthFromTime(t)
          var msPerDay = 86400000;
          var Day_t = @floor(t/msPerDay);

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var DayWithinYear_t = Day_t - DayFromYear_y

          var y = 0;
          var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

          var msPerDay = 86400000;
          var TimeFromYear_y = msPerDay * DayFromYear_y;

          while (TimeFromYear_y <= t) {
            y += 1;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;
          }
          y -= 1;
          var YearFromTime_t = y;

          var y = YearFromTime_t;

          if (y % 4 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 4 === 0 && y % 100 !== 0) {
            var DaysInYear_y = 366;
          }else if (y % 100 === 0 && y % 400 !== 0) {
            var DaysInYear_y = 365;
          }else if (y % 400 === 0) {
            var DaysInYear_y = 366;
          }

          if (DaysInYear_y === 365) {
            var InLeapYear_t = 0;
          }else {
            var InLeapYear_t = 1;
          }

          if (0 <= DayWithinYear_t < 31) {
            var MonthFromTime_t = 0;
          }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
            var MonthFromTime_t = 1;
          }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
            var MonthFromTime_t = 2;
          }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
            var MonthFromTime_t = 3;
          }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
            var MonthFromTime_t = 4;
          }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
            var MonthFromTime_t = 5;
          }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
            var MonthFromTime_t = 6;
          }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
            var MonthFromTime_t = 7;
          }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
            var MonthFromTime_t = 8;
          }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
            var MonthFromTime_t = 9;
          }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
            var MonthFromTime_t = 10;
          }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
            var MonthFromTime_t = 11;
          }
          if (MonthFromTime_t === mn) {
            // DateFromTime(t)
            var msPerDay = 86400000;
            var Day_t = @floor(t/msPerDay);

            var y = 0;
            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var TimeFromYear_y = msPerDay * DayFromYear_y;

            while (TimeFromYear_y <= t) {
              y += 1;
              var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

              var TimeFromYear_y = msPerDay * DayFromYear_y;
            }
            y -= 1;
            var YearFromTime_t = y;

            var y = YearFromTime_t;

            var DayFromYear_y = 365 * (y - 1970) + @floor((y - 1969) / 4) - @floor((y - 1901) / 100) + @floor((y - 1601) / 400);

            var DayWithinYear_t = Day_t - DayFromYear_y

            if (0 <= DayWithinYear_t < 31) {
              var MonthFromTime_t = 0;
            }else if (31 <= DayWithinYear_t < 59 + InLeapYear_t) {
              var MonthFromTime_t = 1;
            }else if (59 + InLeapYear_t <= DayWithinYear_t < 90 + InLeapYear_t) {
              var MonthFromTime_t = 2;
            }else if (90 + InLeapYear_t <= DayWithinYear_t < 120 + InLeapYear_t) {
              var MonthFromTime_t = 3;
            }else if (120 + InLeapYear_t <= DayWithinYear_t < 151 + InLeapYear_t) {
              var MonthFromTime_t = 4;
            }else if (151 + InLeapYear_t <= DayWithinYear_t < 181 + InLeapYear_t) {
              var MonthFromTime_t = 5;
            }else if (181 + InLeapYear_t <= DayWithinYear_t < 212 + InLeapYear_t) {
              var MonthFromTime_t = 6;
            }else if (212 + InLeapYear_t <= DayWithinYear_t < 243 + InLeapYear_t) {
              var MonthFromTime_t = 7;
            }else if (243 + InLeapYear_t <= DayWithinYear_t < 273 + InLeapYear_t) {
              var MonthFromTime_t = 8;
            }else if (273 + InLeapYear_t <= DayWithinYear_t < 304 + InLeapYear_t) {
              var MonthFromTime_t = 9;
            }else if (304 + InLeapYear_t <= DayWithinYear_t < 334 + InLeapYear_t) {
              var MonthFromTime_t = 10;
            }else if (334 + InLeapYear_t <= DayWithinYear_t < 365 + InLeapYear_t) {
              var MonthFromTime_t = 11;
            }

            if (MonthFromTime_t === 0) {
              var DateFromTime = DayWithinYear_t + 1;
            }else if (MonthFromTime_t === 1) {
              var DateFromTime = DayWithinYear_t - 30;
            }else if (MonthFromTime_t === 2) {
              var DateFromTime = DayWithinYear_t - 58 - InLeapYear_t;
            }else if (MonthFromTime_t === 3) {
              var DateFromTime = DayWithinYear_t - 89 - InLeapYear_t;
            }else if (MonthFromTime_t === 4) {
              var DateFromTime = DayWithinYear_t - 119 - InLeapYear_t;
            }else if (MonthFromTime_t === 5) {
              var DateFromTime = DayWithinYear_t - 150 - InLeapYear_t;
            }else if (MonthFromTime_t === 6) {
              var DateFromTime = DayWithinYear_t - 180 - InLeapYear_t;
            }else if (MonthFromTime_t === 7) {
              var DateFromTime = DayWithinYear_t - 211 - InLeapYear_t;
            }else if (MonthFromTime_t === 8) {
              var DateFromTime = DayWithinYear_t - 242 - InLeapYear_t;
            }else if (MonthFromTime_t === 9) {
              var DateFromTime = DayWithinYear_t - 272 - InLeapYear_t;
            }else if (MonthFromTime_t === 10) {
              var DateFromTime = DayWithinYear_t - 303 - InLeapYear_t;
            }else if (MonthFromTime_t === 11) {
              var DateFromTime = DayWithinYear_t - 333 - InLeapYear_t;
            }
            if (DateFromTime === 1){
              break;
            }
          }
        }
        t += 1;
      }
      if (t === 8.64e+15) {
        return_val = NaN;
      }else {
      var msPerDay = 86400000;
      var Day_t = @floor(t/msPerDay);
      return_val = Day_t + dt - 1;
      }
    }
    arg1 = return_val;

    // MakeTime(h, min, s, milli)
    var hour = h;
    var min = min;
    var sec = s;
    var ms = milli;
    var return_val;

    var HoursPerDay = 24;
    var MinutesPerHour = 60;
    var SecondsPerMinute= 60;
    var msPerSecond = 1000;
    var msPerMinute = 60000;
    var msPerHour = 3600000;

    if (hour === Infinity || min === Infinity || sec === Infinity || ms === Infinity) {
      return_val = NaN;
    }else {
      var h = @ToInteger(hour);
      var m = @ToInteger(min);
      var s = @ToInteger(sec);
      var milli = @ToInteger(ms);
      var t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
      return_val = t;
    }
    arg2 = return_val;

    // MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))
    var day = arg1;
    var time = arg2;
    var return_val;
    var msPerDay = 86400000;
    if (day === Infinity || time === Infinity) {
      return_val = NaN;
    }else {
      return_val = day * msPerDay + time;
    }
    arg3 = return_val;

    // TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)))
    var time = arg3;
    var return_val;
    if (time === Infinity) {
      return_val = NaN;
    }
    else if (@abs(time) > 8.64e+15) {
      return_val = NaN;
    }else {
      return_val = @ToInteger(time);
    }
    return return_val;
    */
    return @NumTop;
  }
  \\],
  96: [\\
  function now () {
    // TODO
    return @NumTop;
  }
  \\],
  97: [\\
  function exec (string) {
    @NotYetImplemented("RegExp.prototype.exec");
  }
  \\],
  98: [\\
  function test (str) {
    return @regexTest(this, str);
  }
  \\],
  99: [\\
  function toString () {
    // TODO
    return @StrTop;
  }
  \\],
  100: [\\
  function RegExp () {
    return new RegExp();
  }
  \\],
  101: [\\
  function RegExp (source, flags) {
    var obj = {};
    @Class(obj, "RegExp");
    @Prototype(obj, RegExp.prototype);
    var desc = {
      value: @BoolTop,
      writable: false,
      enumerable: false,
      configurable: false
    };
    desc.value = @BoolTop;
    @DefineOwnProperty(obj, "global", desc);
    @DefineOwnProperty(obj, "ignoreCase", desc);
    @DefineOwnProperty(obj, "multiline", desc);
    desc.value = @NumTop;
    @DefineOwnProperty(obj, "lastIndex", desc);
    desc.value = source;
    @DefineOwnProperty(obj, "source", desc);
    if (flags === undefined) flags = '';
    desc.value = flags;
    @DefineOwnProperty(obj, "flags", desc);
    return obj;
  }
  \\],
  102: [\\
  function toString() {
    // 1. Let O be the this value.
    var O = this;
    // 2. If Type(O) is not Object, throw a TypeError exception.
    if (typeof O !== 'function' && typeof O !== 'object' || O === null) throw new TypeError();
    // 3. Let name be the result of calling the [[Get]] internal method of O with argument "name".
    var name = O.name;
    // 4. If name is undefined, then let name be "Error"; else let name be ToString(name).
    if (@SameValue(name,undefined)) {
      var name = "Error";
    }else {
      var name = @ToString(name);
    }
    // 5. Let msg be the result of calling the [[Get]] internal method of O with argument "message".
    var msg = O.message;
    // 6. If msg is undefined, then let msg be the empty String; else let msg be ToString(msg).
    if (@SameValue(msg,undefined)) {
      var msg = "";
    }else {
      msg = @ToString(msg);
    }
    // 7. If name is the empty String, return msg.
    if (@SameValue(name,"")) {
      return msg;
    }
    // 8. If msg is the empty String, return name.
    if (@SameValue(msg,"")) {
      return name;
    }
    // 9. Return the result of concatenating name, ":", a single space character, and msg.
    return name + ": " + msg;
  }
  \\],
  103: [\\
  function Error (message) {
    var obj ={};
    @Prototype(obj,Error.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  104: [\\
  function Error (message) {
    var obj ={};
    @Prototype(obj,Error.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  105: [\\
  function EvalError (message) {
    var obj = {};
    @Prototype(obj,EvalError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  106: [\\
  function EvalError (message) {
    var obj = {};
    @Prototype(obj,EvalError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  107: [\\
  function RangeError (message) {
    var obj = {};
    @Prototype(obj,RangeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  108: [\\
  function RangeError (message) {
    var obj = {};
    @Prototype(obj,RangeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  109: [\\
  function ReferenceError (message) {
    var obj = {};
    @Prototype(obj,ReferenceError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  110: [\\
  function ReferenceError (message) {
    var obj = {};
    @Prototype(obj,ReferenceError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  111: [\\
  function SyntaxError (message) {
    var obj = {};
    @Prototype(obj,SyntaxError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  112: [\\
  function SyntaxError (message) {
    var obj = {};
    @Prototype(obj,SyntaxError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;

  }
  \\],
  113: [\\
  function TypeError (message) {
    var obj = {};
    @Prototype(obj,TypeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  114: [\\
  function TypeError (message) {
    var obj = {};
    @Prototype(obj,TypeError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  115: [\\
  function URIError (message) {
    var obj = {};
    @Prototype(obj,URIError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  116: [\\
  function URIError (message) {
    var obj = {};
    @Prototype(obj,URIError.prototype);
    @Class(obj,"Error");
    @Extensible(obj,true);
    if (!@SameValue(message,undefined)) {
      obj.message = @ToString(message);
    }
    return obj;
  }
  \\],
  117: [\\
  function abs (x) {
    return @abs(x);
  }
  \\],
  118: [\\
  function acos (x) {
    return @acos(x);
  }
  \\],
  119: [\\
  function asin (x) {
    return @asin(x);
  }
  \\],
  120: [\\
  function atan (x) {
    return @atan(x);
  }
  \\],
  121: [\\
  function atan2 (x, y) {
    return @atan2(x, y);
  }
  \\],
  122: [\\
  function ceil (x) {
    return @ceil(x);
  }
  \\],
  123: [\\
  function cos (x) {
    return @cos(x);
  }
  \\],
  124: [\\
  function exp (x) {
    return @exp(x);
  }
  \\],
  125: [\\
  function floor (x) {
    return @floor(x);
  }
  \\],
  126: [\\
  function log (x) {
    return @log(x);
  }
  \\],
  127: [\\
  function max () {
    var i, n = arguments.length, v = -Infinity;
    for (i = 0; i < n; i++) {
      var cur = @ToNumber(arguments[i])
      if (@SameValue(cur, NaN)) return NaN;
      if (v < cur) v = cur;
      if (@SameValue(v, -0) && @SameValue(cur, +0)) v = +0;
    }
    return v;
  }
  \\],
  128: [\\
  function min () {
    var i, n = arguments.length, v = Infinity;
    for (i = 0; i < n; i++) {
      var cur = @ToNumber(arguments[i])
      if (@SameValue(cur, NaN)) return NaN;
      if (v > cur) v = cur;
      if (@SameValue(v, +0) && @SameValue(cur, -0)) v = -0;
    }
    return v;
  }
  \\],
  129: [\\
  function pow (x, y) {
    return @pow(x, y);
  }
  \\],
  130: [\\
  function random () {
    return @NumTop;
  }
  \\],
  131: [\\
  function round (x) {
    return @round(x);
  }
  \\],
  132: [\\
  function sin (x) {
    return @sin(x);
  }
  \\],
  133: [\\
  function sqrt (x) {
    return @sqrt(x);
  }
  \\],
  134: [\\
  function tan (x) {
    return @tan(x);
  }
  \\],
  135: [\\
  function parse (text, reviver) {
    @NotYetImplemented("JSON.parse")
  }
  \\],
  136: [\\
  function stringify (value, replacer, space) {
    @NotYetImplemented("JSON.stringify")
  }
  \\],
  137: [\\
  function bindCall () {
    // 1. Let boundArgs be the value of F’s [[BoundArgs]] internal property.
    var boundArgs = @BoundArgs(arguments.callee);
    // 2. Let boundThis be the value of F’s [[BoundThis]] internal property.
    var boundThis = @BoundThis(arguments.callee);
    // 3. Let target be the value of F’s [[TargetFunction]] internal property.
    var target = @TargetFunction(arguments.callee);
    // 4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the same values as the list ExtraArgs in the same order.
    var args = [];
    for (var i = 0; i < boundArgs.length; i++) {
      args[i] = boundArgs[i];
    }
    for (var j = 0; j < arguments.length; j++) {
      args[j+i] = arguments[j];
    }
    // 5. Return the result of calling the [[Call]] internal method of target providing boundThis as the this value and providing args as the arguments.
    return @Call(target, boundThis, args);
  }
  \\],
  138: [\\
  function bindConstruct () {
    // 1. Let target be the value of F’s [[TargetFunction]] internal property.
    var target = @TargetFunction(arguments.callee);
    // 2. If target has no [[Construct]] internal method, a TypeError exception is thrown.
    if (@HasConstruct(target) === false) throw new TypeError();
    // 3. Let boundArgs be the value of F’s [[BoundArgs]] internal property.
    var boundArgs = @BoundArgs(arguments.callee);
    // 4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the same values as the list ExtraArgs in the same order.
    var args = [];
    for (var i = 0; i < boundArgs.length; i++) {
      args[i] = boundArgs[i];
    }
    for (var j = 0; j < arguments.length; j++) {
      args[j+i] = arguments[j];
    }
    // 5. Return the result of calling the [[Construct]] internal method of target providing args as the arguments.
    return @Construct(target, this, args);
  }
  \\],
  139: [\\
  function DefaultValue (v, hint) {
    if (hint === 'String') {
      if (@IsCallable(v.toString)) {
        var result = @Call(v.toString, v, []);
        if (!@isObject(result)) return result;
      }
      if (@IsCallable(v.valueOf)) {
        var result = @Call(v.valueOf, v, []);
        if (!@isObject(result)) return result;
      }
    }
    if (hint === 'Number') {
      if (@IsCallable(v.valueOf)) {
        var result = @Call(v.valueOf, v, []);
        if (!@isObject(result)) return result;
      }
      if (@IsCallable(v.toString)) {
        var result = @Call(v.toString, v, []);
        if (!@isObject(result)) return result;
      }
    }
    throw new TypeError();
  }
  \\],
  140: [\\
  function ToPrimitive (v, hint) {
    if (@isObject(v)) return @getLoc('DefaultValue')(v, hint);
    else return v;
  }
  \\],
  141: [\\
  function ToString (v) {
    return @ToString(@getLoc('ToPrimitive')(v, 'String'));
  }
  \\],
  142: [\\
  function ToNumber (v) {
    return @ToNumber(@getLoc('ToPrimitive')(v, 'number'));
  }
  \\]
}
